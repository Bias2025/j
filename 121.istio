# Istio Auto-Scaling Configuration Prompt - CRAFT Format

```yaml
# You are a world-class Istio auto-scaling architect and Kubernetes resource optimization expert with 25+ years of experience in enterprise-grade service mesh scaling,
# specializing in Horizontal Pod Autoscaler (HPA), Vertical Pod Autoscaler (VPA), and comprehensive auto-scaling strategies for Istio-enabled microservices architectures.
#
# CONTEXT: Design and implement comprehensive auto-scaling configurations for [PROJECT_NAME] Istio service mesh
# to optimize [DOMAIN_NAME] domain service performance serving [BUSINESS_PURPOSE] with complete dynamic scaling and resource optimization
#
# REQUIREMENTS:
# Functional: Comprehensive HPA configuration with CPU, memory, and custom metrics-based scaling for Istio services, Advanced VPA integration with automatic resource recommendation and right-sizing for optimal performance, Custom metrics auto-scaling with Prometheus integration and service mesh specific metrics, Traffic-aware scaling with Istio metrics including request rate, latency, and error rate thresholds, Multi-dimensional scaling with combined CPU, memory, network, and application-specific metrics, Cluster auto-scaling integration with node provisioning and Istio control plane scaling, Predictive scaling with machine learning-based traffic prediction and preemptive resource allocation, Service dependency scaling with upstream/downstream service coordination and cascade scaling, Circuit breaker integration with scaling decisions based on circuit breaker states and failure rates, Load balancing optimization with scaling events coordination and traffic distribution, Observability integration with scaling event monitoring and performance impact analysis, Security policy scaling with automatic policy adjustment for scaled service instances
# Non-Functional: Enhanced service performance through intelligent auto-scaling and optimal resource utilization, Improved cost efficiency with right-sizing and demand-based scaling strategies, Better system reliability through proactive scaling and resource availability guarantees, Enhanced user experience through consistent performance under varying load conditions, Improved operational efficiency through automated scaling decisions and minimal manual intervention, Better resource utilization through dynamic allocation and waste reduction, Enhanced monitoring with comprehensive scaling metrics and performance analytics, Improved capacity planning through historical scaling data and trend analysis
#
# ARCHITECTURE: Kubernetes auto-scaling architecture with HPA and VPA integration for Istio services, Service mesh-aware scaling architecture with Istio metrics and traffic management, Multi-tier scaling architecture with application, infrastructure, and cluster-level scaling, Event-driven scaling architecture with real-time metrics processing and decision making, Observability architecture with comprehensive scaling monitoring and performance tracking
#
# TESTING: Auto-scaling testing with load simulation and scaling behavior validation, Performance testing with scaling threshold verification and response time measurement, Stress testing with extreme load scenarios and scaling limit validation, Resilience testing with failure injection and scaling recovery verification, Integration testing with service mesh functionality during scaling events
#
# CONSTRAINTS:
# Quality: Zero service disruption during scaling events with graceful scaling transitions, Complete metric accuracy with reliable scaling decisions and threshold monitoring, Reliable scaling behavior with predictable scaling patterns and consistent performance, Comprehensive monitoring with detailed scaling event tracking and performance impact analysis, Configuration consistency with standardized scaling policies across all services, Error handling with scaling failure recovery and automatic remediation, Performance optimization with minimal scaling overhead and efficient resource allocation
# Performance: Optimized scaling response time with fast scaling decisions and minimal delay, Resource efficiency through intelligent scaling algorithms and optimal resource allocation, CPU and memory optimization with efficient scaling logic and minimal overhead, Network performance optimization with scaling-aware traffic management and load distribution, Scaling speed optimization with parallel scaling operations and efficient resource provisioning, Metric collection optimization with efficient monitoring and minimal performance impact
# Security: Secure scaling with proper RBAC permissions and access control for scaling operations, Resource isolation during scaling with proper security boundaries and network policies, Secret management during scaling with secure credential distribution to new instances, Audit logging with comprehensive scaling activity tracking and compliance reporting, Policy enforcement during scaling with security policy application to scaled instances
#
# FRAMEWORKS: Kubernetes HPA/VPA, Istio 1.20+, Prometheus, Grafana, KEDA, Cluster Autoscaler, Metrics Server, Custom Metrics API
#
# ORIGINALITY REQUIREMENTS:
# - Create COMPREHENSIVE auto-scaling configuration for [PROJECT_NAME] Istio services and [DOMAIN_NAME] performance optimization
# - Implement ADVANCED scaling strategies tailored to [PROJECT_NAME] traffic patterns and [BUSINESS_PURPOSE] requirements
# - Design SOPHISTICATED metrics integration for [DOMAIN_NAME] service mesh aware scaling decisions
# - Generate THOROUGH scaling policies for [PROJECT_NAME] predictable performance and resource efficiency
# - Create ROBUST scaling coordination for [BUSINESS_PURPOSE] multi-service scaling and dependency management
# - Implement COMPLETE monitoring integration for [DOMAIN_NAME] scaling event tracking and performance analysis
# - Design COMPREHENSIVE security integration for [PROJECT_NAME] secure scaling and policy enforcement
# - Generate ADVANCED automation for [BUSINESS_PURPOSE] scaling management and operational efficiency
# - Create DETAILED documentation for [DOMAIN_NAME] auto-scaling procedures and maintenance guidelines
# - Implement AUTOMATED validation for [PROJECT_NAME] scaling configuration compliance and performance verification
#
# Generate comprehensive Istio auto-scaling solution that:
# - Creates COMPLETE HPA and VPA configurations with service mesh metrics integration and intelligent scaling thresholds
# - Implements ADVANCED custom metrics scaling with Prometheus integration and Istio-specific performance indicators
# - Develops SOPHISTICATED scaling coordination with multi-service dependency management and cascade scaling
# - Generates THOROUGH traffic-aware scaling with request rate, latency, and error rate based scaling decisions
# - Creates ROBUST predictive scaling with machine learning integration and proactive resource allocation
# - Implements COMPREHENSIVE monitoring integration with scaling event tracking and performance impact analysis
# - Develops ADVANCED security integration with RBAC permissions and policy enforcement during scaling
# - Generates COMPLETE automation with scaling workflow orchestration and operational efficiency optimization
# - Creates DETAILED documentation explaining auto-scaling strategies and operational procedures
# - Implements AUTOMATED testing procedures ensuring scaling reliability and performance validation

/*
 * ENHANCED CRAFT METHOD FOR COMPREHENSIVE ISTIO AUTO-SCALING CONFIGURATION
 * This enterprise-grade prompt generates COMPLETE, production-ready auto-scaling solution with:
 * 
 * COMPREHENSIVE AUTO-SCALING INTEGRATION:
 * - Advanced HPA configuration with CPU, memory, and custom metrics scaling
 * - Sophisticated VPA integration with automatic resource recommendation and optimization
 * - Complete custom metrics integration with Prometheus and Istio service mesh metrics
 * - Advanced traffic-aware scaling with request rate, latency, and error rate thresholds
 * - Comprehensive multi-dimensional scaling with combined metrics and intelligent decision making
 * - Sophisticated cluster auto-scaling with node provisioning and infrastructure scaling
 * - Advanced predictive scaling with machine learning and traffic pattern analysis
 * - Complete dependency scaling with service coordination and cascade scaling strategies
 * 
 * ADVANCED SCALING STRATEGIES:
 * - Sophisticated threshold configuration with hysteresis and stabilization windows
 * - Advanced scaling algorithms with exponential, linear, and custom scaling behaviors
 * - Complex metric aggregation with weighted metrics and composite scaling decisions
 * - Comprehensive scaling policies with time-based scheduling and demand prediction
 * - Advanced circuit breaker integration with scaling decisions based on failure rates
 * - Sophisticated load balancing coordination with traffic distribution during scaling
 * - Complex resource optimization with right-sizing and waste reduction strategies
 * - Advanced performance optimization with scaling overhead minimization
 * 
 * SOPHISTICATED ISTIO METRICS INTEGRATION:
 * - Advanced service mesh metrics with request throughput and latency monitoring
 * - Comprehensive traffic management metrics with routing and load balancing data
 * - Sophisticated security metrics with authentication and authorization tracking
 * - Complex observability integration with distributed tracing and performance analytics
 * - Advanced gateway metrics with ingress/egress traffic monitoring and scaling
 * - Comprehensive sidecar metrics with proxy performance and resource utilization
 * - Sophisticated workload metrics with application-specific performance indicators
 * - Advanced cluster metrics with control plane performance and resource utilization
 * 
 * PRODUCTION-READY AUTO-SCALING IMPLEMENTATIONS:
 * - Thread-safe scaling with proper concurrency control and race condition prevention
 * - Memory-efficient scaling with optimized resource allocation and cleanup procedures
 * - Performance-optimized scaling with minimal overhead and efficient algorithms
 * - Error-resilient scaling with comprehensive exception handling and recovery mechanisms
 * - Configurable scaling with external property support and dynamic threshold adjustment
 * - Monitored scaling with detailed logging and performance tracking
 * - Documented scaling with comprehensive guides and troubleshooting procedures
 * - Maintainable scaling with modular design and extensible architecture
 * 
 * PARAMETERIZED PLACEHOLDERS - Replace with your specific values:
 * - [PROJECT_NAME] → Your project name (ECommerceApp, PaymentService, UserManagement, etc.)
 * - [DOMAIN_NAME] → Your business domain (ecommerce, payments, user-management, etc.)
 * - [BUSINESS_PURPOSE] → Your business purpose (online shopping, payment processing, user authentication, etc.)
 * - [SERVICE_NAME] → Your service name (checkout-service, payment-gateway, user-service, etc.)
 * - [COMPANY_NAME] → Your company name (RetailCorp, PaymentInc, UserSystems, etc.)
 * - [NAMESPACE] → Your namespace (production, staging, development, etc.)
 * - [CLUSTER_NAME] → Your cluster name (prod-cluster, staging-cluster, dev-cluster, etc.)
 * - [METRICS_NAMESPACE] → Your metrics namespace (istio-system, monitoring, etc.)
 * 
 * ISTIO AUTO-SCALING CUSTOMIZATIONS:
 * - Identify your specific traffic patterns and load characteristics for optimized scaling thresholds
 * - Define your performance requirements and SLA targets for intelligent scaling decisions
 * - Specify your resource constraints and cost optimization goals for efficient scaling strategies
 * - Configure your service dependencies and coordination requirements for cascade scaling
 * - Set up your monitoring and alerting requirements for comprehensive scaling oversight
 * - Define your security requirements and compliance needs for secure scaling operations
 * - Specify your automation requirements and integration needs for operational efficiency
 * - Configure your testing requirements and validation strategies for scaling reliability
 * 
 * The more specific your service characteristics and [DOMAIN_NAME] scaling requirements, the more targeted and effective the auto-scaling configuration will be!
 */

## COMPREHENSIVE ISTIO AUTO-SCALING FRAMEWORK

### Phase 1: Advanced Horizontal Pod Autoscaler (HPA) Configuration
**Enterprise [DOMAIN_NAME] Service Mesh Auto-Scaling Foundation**

#### Complete HPA Configuration with Istio Metrics Integration
```yaml
# Comprehensive HPA Configuration for [PROJECT_NAME] - [SERVICE_NAME]
# File: istio/autoscaling/[SERVICE_NAME]-hpa.yaml

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: [SERVICE_NAME]-hpa
  namespace: [NAMESPACE]
  labels:
    app: [SERVICE_NAME]
    project: [PROJECT_NAME]
    domain: [DOMAIN_NAME]
    purpose: auto-scaling
    managed-by: istio-platform-team
  annotations:
    description: "Advanced HPA configuration for [SERVICE_NAME] with Istio metrics integration"
    owner: "[COMPANY_NAME]-platform-team"
    scaling-strategy: "traffic-aware"
    metrics-provider: "prometheus"
    last-updated: "{{ .Values.global.timestamp }}"
    documentation: "https://docs.[COMPANY_NAME].com/istio/autoscaling/[SERVICE_NAME]"
spec:
  # Target Deployment for Scaling
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: [SERVICE_NAME]
  
  # Scaling Range Configuration
  minReplicas: 2          # Minimum replicas for high availability
  maxReplicas: 50         # Maximum replicas for [DOMAIN_NAME] peak load
  
  # Advanced Scaling Behavior Configuration
  behavior:
    scaleDown:
      # Stabilization window to prevent flapping
      stabilizationWindowSeconds: 300  # 5 minutes stabilization
      policies:
      - type: Percent
        value: 25           # Scale down by max 25% of current replicas
        periodSeconds: 60   # Every minute
      - type: Pods
        value: 2            # Scale down by max 2 pods
        periodSeconds: 60   # Every minute
      selectPolicy: Min     # Use the most
