// You are a world-class Spring Boot architect and testing expert with 50+ years of combined experience, specializing in enterprise-grade development patterns and best practices.
//
// CONTEXT: create grapql unit test cases working with claims entity in claims domain for claimsportal project
//
// REQUIREMENTS:
// Functional: CRUD operations with validation, Authentication and authorization, RESTful API endpoints
// Non-Functional: High performance (sub-second response), 99.9% uptime availability, Enterprise security standards, Clean, maintainable code structure, Comprehensive logging and monitoring, Efficient caching strategy
//
// ARCHITECTURE: Microservices architecture, Layered architecture (Controller-Service-Repository), Hexagonal/Clean architecture, Cloud-native design patterns, SOLID principles adherence, Event-driven architecture
//
// TESTING: Unit tests (80%+ coverage), , Behavior-driven development (BDD), Performance and load testing, Proper mocking and test doubles, Security testing (OWASP)
//
// CONSTRAINTS:
// Quality: Minimum 80% code coverage, Clean code principles (SOLID, DRY, KISS), SonarQube quality gates compliance, Comprehensive JavaDoc/JSDoc documentation
// Performance: API response time < 500ms, Memory usage < 512MB heap, Handle 1000+ concurrent requests
// Security: OWASP Top 10 vulnerability prevention, Cross-site scripting (XSS) protection, Comprehensive audit trail logging
//
// FRAMEWORKS: GraphQL Java, GraphQL Spring Boot Starter, GraphQL Test Tools, GraphQL Java Kickstart
//
// ORIGINALITY REQUIREMENTS:
// - Create UNIQUE implementation with custom business logic specific to claims domain
// - Use distinctive variable names, method signatures, and class structures for claims
// - Implement domain-specific validation rules and custom business constraints for claimsresults
// - Add unique error handling patterns with [COMPANY_NAME]-specific error codes and messages
// - Include original comments explaining claimsportal business context and implementation decisions
// - Avoid generic boilerplate patterns - create contextual, claims-driven code
// - Use creative naming conventions that reflect the claims business domain and [COMPANY_NAME] standards
// - Implement custom utility methods and helper classes specific to claims use case
// - Create unique test scenarios based on real claims business requirements
// - Generate original documentation that explains claimsportal specific implementation choices
//
// Generate comprehensive Spring Boot implementation that:
// - Follows enterprise patterns and SOLID principles with unique claims business logic
// - Includes extensive error handling with [COMPANY_NAME]-specific error messages
// - Implements proper logging with contextual claimsportal business information
// - Uses modern Java 17+ features in creative ways for claims
// - Includes comprehensive test coverage with realistic claims business scenarios
// - Handles edge cases specific to claims domain and claims requirements
// - Follows security best practices with custom [COMPANY_NAME] validation logic
// - Implements proper documentation with claimsportal business context explanations
// - Adheres to specified quality gates with unique claims implementation approach
// - Creates original code structure that reflects specific [COMPANY_NAME] business needs
/*
 * Generated with CRAFT method for GitHub Copilot - ORIGINALITY FOCUSED
 * This enterprise-grade prompt generates UNIQUE, production-ready code with:
 * - Custom claims business logic implementation tailored to your domain
 * - Original naming conventions and method signatures for claims
 * - Domain-specific validation and error handling for claimsresults
 * - Unique test scenarios based on real claims business requirements
 * - Creative implementation patterns that avoid common boilerplate
 * - Contextual comments and documentation for claimsportal
 * 
 * PARAMETERIZED PLACEHOLDERS - Replace with your specific values:
 * - claims → Your business domain (e-commerce, fintech, healthcare, etc.)
 * - claims → Your actual entity (Customer, Invoice, Patient, etc.)
 * - claimsresults → Your specific feature (UserRegistration, PaymentProcessing, etc.)
 * - claimsportal → Your project name (CustomerPortal, BillingSystem, etc.)
 * - [COMPANY_NAME] → Your company name (Acme Corp, TechSolutions, etc.)
 * 
 * ADDITIONAL CUSTOMIZATIONS:
 * - Add your industry-specific constraints and business rules
 * - Include your company's coding standards and naming conventions
 * - Specify your unique error handling and logging requirements
 * - Define your custom validation logic and business workflows
 * 
 * The more specific your business context, the more original the generated code will be!
 */
