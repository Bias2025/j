package com.example.graphqlclient;

import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.graphql.GraphQlAutoConfiguration;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.graphql.client.HttpGraphQlClient;
import org.springframework.graphql.client.WebSocketGraphQlClient;
import org.springframework.graphql.client.ExecutionGraphQlServiceTester;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
@AutoConfigureAfter(GraphQlAutoConfiguration.class)
@EnableConfigurationProperties(GraphQlClientProperties.class)
public class GraphQlClientConfiguration {

    @Bean
    @ConditionalOnMissingBean
    public WebClient graphQlWebClient(GraphQlClientProperties properties) {
        return WebClient.builder()
                .baseUrl(properties.getEndpoint())
                .build();
    }

    @Bean
    @ConditionalOnMissingBean
    public HttpGraphQlClient httpGraphQlClient(WebClient graphQlWebClient) {
        return HttpGraphQlClient.builder(graphQlWebClient)
                .build();
    }

    @Bean
    @ConditionalOnMissingBean
    public WebSocketGraphQlClient webSocketGraphQlClient(GraphQlClientProperties properties) {
        return WebSocketGraphQlClient.builder(properties.getWebSocketEndpoint())
                .build();
    }

    @Bean
    @ConditionalOnMissingBean
    public ExecutionGraphQlServiceTester executionGraphQlServiceTester() {
        return ExecutionGraphQlServiceTester.create();
    }
}
package com.example.graphqlclient;

import org.springframework.boot.context.properties.ConfigurationProperties;

@ConfigurationProperties(prefix = "graphql.client")
public class GraphQlClientProperties {

    /**
     * The HTTP endpoint for GraphQL queries/mutations.
     */
    private String endpoint = "http://localhost:8080/graphql";

    /**
     * The WebSocket endpoint for GraphQL subscriptions.
     */
    private String webSocketEndpoint = "ws://localhost:8080/graphql";

    public String getEndpoint() {
        return endpoint;
    }

    public void setEndpoint(String endpoint) {
        this.endpoint = endpoint;
    }

    public String getWebSocketEndpoint() {
        return webSocketEndpoint;
    }

    public void setWebSocketEndpoint(String webSocketEndpoint) {
        this.webSocketEndpoint = webSocketEndpoint;
    }
}
package com.example.graphqlclient;

import org.springframework.graphql.client.HttpGraphQlClient;
import org.springframework.graphql.client.WebSocketGraphQlClient;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;
import reactor.core.publisher.Flux;

import java.util.Map;

@Service
public class GraphQlService {

    private final HttpGraphQlClient httpGraphQlClient;
    private final WebSocketGraphQlClient webSocketGraphQlClient;

    public GraphQlService(HttpGraphQlClient httpGraphQlClient, WebSocketGraphQlClient webSocketGraphQlClient) {
        this.httpGraphQlClient = httpGraphQlClient;
        this.webSocketGraphQlClient = webSocketGraphQlClient;
    }

    // Type-safe query execution (generic)
    public <T> Mono<T> executeQuery(String query, Map<String, Object> variables, Class<T> responseType) {
        return httpGraphQlClient.document(query)
                .variables(variables)
                .retrieve("data")
                .toEntity(responseType);
    }

    // Type-safe mutation execution (generic)
    public <T> Mono<T> executeMutation(String mutation, Map<String, Object> variables, Class<T> responseType) {
        return httpGraphQlClient.document(mutation)
                .variables(variables)
                .retrieve("data")
                .toEntity(responseType);
    }

    // Subscription support
    public <T> Flux<T> subscribe(String subscription, Map<String, Object> variables, Class<T> elementType) {
        return webSocketGraphQlClient.document(subscription)
                .variables(variables)
                .retrieveSubscription("data")
                .toEntity(elementType);
    }
}
package com.example.graphqlclient;

import graphql.GraphQLError;
import graphql.GraphqlErrorBuilder;
import org.springframework.graphql.execution.DataFetcherExceptionResolverAdapter;
import org.springframework.stereotype.Component;

@Component
public class GraphQlExceptionResolver extends DataFetcherExceptionResolverAdapter {
    @Override
    protected GraphQLError resolveToSingleError(Throwable ex, org.springframework.graphql.execution.DataFetchingEnvironment env) {
        return GraphqlErrorBuilder.newError(env)
                .message("GraphQL error: " + ex.getMessage())
                .build();
    }
}
package com.example.graphqlclient.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(authorize ->
                authorize.anyRequest().authenticated()
            )
            .oauth2ResourceServer(oauth2 ->
                oauth2.jwt()
            );
        return http.build();
    }
}
package com.example.graphqlclient.metrics;

import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MetricsConfiguration {

    @Bean
    public MeterRegistryCustomizer<MeterRegistry> metricsCommonTags() {
        return registry -> registry.config().commonTags("application", "graphql-client");
    }
}
package com.example.graphqlclient.faulttolerance;

import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import io.github.resilience4j.retry.RetryConfig;
import io.github.resilience4j.retry.RetryRegistry;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ResilienceConfig {

    @Bean
    public CircuitBreakerRegistry circuitBreakerRegistry() {
        return CircuitBreakerRegistry.ofDefaults();
    }

    @Bean
    public RetryRegistry retryRegistry() {
        return RetryRegistry.ofDefaults();
    }
}
package com.example.graphqlclient;

import org.springframework.graphql.client.HttpGraphQlClient;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;

@Service
public class GraphQlSchemaIntrospectionService {

    private final HttpGraphQlClient httpGraphQlClient;

    public GraphQlSchemaIntrospectionService(HttpGraphQlClient httpGraphQlClient) {
        this.httpGraphQlClient = httpGraphQlClient;
    }

    public Mono<String> introspectSchema() {
        String introspectionQuery = """
          query IntrospectionQuery {
            __schema {
              types {
                name
                kind
                fields {
                  name
                }
              }
            }
          }
        """;
        return httpGraphQlClient.document(introspectionQuery)
                .retrieve("data")
                .toEntity(String.class); // Or custom DTO for schema
    }
}
package com.example.graphqlclient;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.graphql.GraphQlTest;
import org.springframework.graphql.test.tester.GraphQlTester;

@GraphQlTest(GraphQlService.class)
public class GraphQlClientTests {

    @Autowired
    private GraphQlTester graphQlTester;

    @Test
    void testQuery() {
        String query = "{ hello }";
        graphQlTester.document(query)
                .execute()
                .path("hello")
                .hasValue();
    }

    @Test
    void testMutation() {
        String mutation = "mutation { createUser(name: \"Test\") { id name } }";
        graphQlTester.document(mutation)
                .execute()
                .path("createUser.name")
                .entity(String.class)
                .isEqualTo("Test");
    }

    @Test
    void testSubscription() {
        String subscription = "subscription { userCreated { id name } }";
        graphQlTester.document(subscription)
                .executeSubscription()
                .toFlux()
                .subscribe(result -> result.path("userCreated.name").hasValue());
    }
}

# Spring Boot GraphQL Client

## Overview

Production-ready Spring Boot 3.x GraphQL client leveraging native Spring GraphQL capabilities. Features include:

- Type-safe query, mutation, and subscription execution
- Schema introspection
- Error handling via `DataFetcherExceptionResolver`
- OAuth2/JWT security integration
- Circuit breakers and retry mechanisms with Resilience4j
- Micrometer metrics
- Connection pooling and reactive support
- Built-in testing with `@GraphQlTest` and `GraphQlTester`

## Quick Start

1. **Add dependencies** (Maven):

    ```xml
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-graphql</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.graphql</groupId>
        <artifactId>spring-graphql-test</artifactId>
        <scope>test</scope>
    </dependency>
    <!-- Add Resilience4j, Micrometer, Spring Security as needed -->
    ```

2. **Configure endpoints** (`application.yml`):

    ```yaml
    graphql:
      client:
        endpoint: http://localhost:8080/graphql
        webSocketEndpoint: ws://localhost:8080/graphql
    ```

3. **Use the client in your services:**

    ```java
    @Autowired
    private GraphQlService graphQlService;
    ```

4. **Testing:**

    See `src/test/java/com/example/graphqlclient/GraphQlClientTests.java` for examples using `@GraphQlTest`.

## Features

- **HTTP & WebSocket GraphQL clients**
- **Reactive (WebFlux) and imperative (WebMVC) support**
- **Auto-configuration for client beans**
- **OAuth2/JWT authentication ready**
- **Resilience4j circuit breakers and retries**
- **Micrometer metrics integration**
- **Schema introspection service**
- **Centralized error handling**
- **Connection pooling/backpressure for scalability**
- **GraphQlTester and TestContainers for robust testing**

## Extending

- Add custom DTOs for type-safe responses.
- Integrate additional Resilience4j patterns as needed.
- Customize `GraphQlExceptionResolver` for application-specific error handling.

## License

Apache-2.0
