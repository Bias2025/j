<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>gov.example</groupId>
    <artifactId>user-service</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    <name>User Service</name>

    <properties>
        <java.version>17</java.version>
        <spring-boot.version>3.2.1</spring-boot.version>
        <spring-cloud.version>2023.0.0</spring-cloud.version>
        <testng.version>7.8.0</testng.version>
        <cucumber.version>7.15.0</cucumber.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Spring Boot Starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <!-- TestNG -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Cucumber/TestNG Integration (for BDD) -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-testng</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Spring Cloud Contract Stub Runner (no JUnit) -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-contract-stub-runner</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

package gov.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
  public static void main(String[] args) {
    SpringApplication.run(Application.class, args);
  }
}
package gov.example.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {
    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/v1/admin/**").hasRole("ADMIN")
                .requestMatchers("/actuator/**", "/v3/api-docs/**", "/swagger-ui.html", "/swagger-ui/**").permitAll()
                .anyRequest().authenticated())
            .headers(headers -> headers
                .contentSecurityPolicy(csp -> csp.policyDirectives("default-src 'self'"))
                .xssProtection(xss -> xss.block(true))
                .frameOptions(frame -> frame.sameOrigin()))
            .httpBasic(Customizer.withDefaults());
        return http.build();
    }
}
package gov.example.config;

import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableCaching
public class CacheConfig {
    // Further custom Redis setup if required
}
package gov.example.user.adapter.in.web;

import gov.example.user.application.port.in.GetUserQuery;
import gov.example.user.application.port.in.RegisterUserCommand;
import gov.example.user.application.port.in.UserRegistrationUseCase;
import gov.example.user.domain.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@RequestMapping("/api/v1/users")
@Tag(name = "Users", description = "User management APIs")
public class UserController {
    private final UserRegistrationUseCase userRegistrationUseCase;
    private final GetUserQuery getUserQuery;

    public UserController(UserRegistrationUseCase userRegistrationUseCase, GetUserQuery getUserQuery) {
        this.userRegistrationUseCase = userRegistrationUseCase;
        this.getUserQuery = getUserQuery;
    }

    @Operation(summary = "Register new user", responses = {
            @ApiResponse(responseCode = "201", description = "User created"),
            @ApiResponse(responseCode = "400", description = "Validation failed")
    })
    @PostMapping
    public ResponseEntity<UserDto> register(@Valid @RequestBody RegisterUserRequest request) {
        User user = userRegistrationUseCase.register(
                new RegisterUserCommand(request.getUsername(), request.getEmail()));
        return ResponseEntity.status(201).body(UserDto.of(user));
    }

    @Operation(summary = "Get user by ID", responses = {
            @ApiResponse(responseCode = "200", description = "User found"),
            @ApiResponse(responseCode = "404", description = "User not found")
    })
    @GetMapping("/{id}")
    public ResponseEntity<UserDto> getById(@PathVariable UUID id) {
        return getUserQuery.findById(id)
                .map(UserDto::of)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
}
package gov.example.user.adapter.in.web;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;

public class RegisterUserRequest {
    @NotBlank
    private String username;
    @NotBlank
    @Email
    private String email;

    // getters and setters
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}
package gov.example.user.adapter.in.web;

import gov.example.user.domain.User;

import java.util.UUID;

public record UserDto(UUID id, String username, String email) {
    public static UserDto of(User user) {
        return new UserDto(user.getId(), user.getUsername(), user.getEmail());
    }
}
package gov.example.user.application.port.in;

import gov.example.user.domain.User;

import java.util.Optional;
import java.util.UUID;

public interface GetUserQuery {
    Optional<User> findById(UUID id);
}
package gov.example.user.application.port.in;

public record RegisterUserCommand(String username, String email) {}
package gov.example.user.application.port.in;

import gov.example.user.domain.User;

public interface UserRegistrationUseCase {
    User register(RegisterUserCommand command);
}package gov.example.user.application.service;

import gov.example.user.application.port.in.GetUserQuery;
import gov.example.user.application.port.in.RegisterUserCommand;
import gov.example.user.application.port.in.UserRegistrationUseCase;
import gov.example.user.application.port.out.UserRepositoryPort;
import gov.example.user.domain.User;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;
import java.util.UUID;

@Service
public class UserService implements UserRegistrationUseCase, GetUserQuery {
    private final UserRepositoryPort userRepository;

    public UserService(UserRepositoryPort userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    @Transactional
    public User register(RegisterUserCommand command) {
        // TODO: business validations, events, audit trail, etc.
        User user = new User(UUID.randomUUID(), command.username(), command.email());
        return userRepository.save(user);
    }

    @Override
    @Cacheable("users")
    public Optional<User> findById(UUID id) {
        return userRepository.findById(id);
    }
}package gov.example.user.application.port.out;

import gov.example.user.domain.User;

import java.util.Optional;
import java.util.UUID;

public interface UserRepositoryPort {
    User save(User user);
    Optional<User> findById(UUID id);
}package gov.example.user.adapter.out.persistence;

import jakarta.persistence.*;
import java.util.UUID;

@Entity
@Table(name = "users")
public class UserJpaEntity {
    @Id
    @Column(columnDefinition = "uuid")
    private UUID id;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false, unique = true)
    private String email;

    // getters and setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}package gov.example.user.adapter.out.persistence;

import org.springframework.data.jpa.repository.JpaRepository;

import java.util.UUID;

public interface UserJpaRepository extends JpaRepository<UserJpaEntity, UUID> {}
package gov.example.user.adapter.out.persistence;

import gov.example.user.application.port.out.UserRepositoryPort;
import gov.example.user.domain.User;
import org.springframework.stereotype.Component;

import java.util.Optional;
import java.util.UUID;

@Component
public class UserPersistenceAdapter implements UserRepositoryPort {
    private final UserJpaRepository repo;

    public UserPersistenceAdapter(UserJpaRepository repo) {
        this.repo = repo;
    }

    @Override
    public User save(User user) {
        UserJpaEntity entity = new UserJpaEntity();
        entity.setId(user.getId());
        entity.setUsername(user.getUsername());
        entity.setEmail(user.getEmail());
        repo.save(entity);
        return user;
    }

    @Override
    public Optional<User> findById(UUID id) {
        return repo.findById(id)
            .map(e -> new User(e.getId(), e.getUsername(), e.getEmail()));
    }package gov.example.user.domain;

import java.util.UUID;

public class User {
    private final UUID id;
    private final String username;
    private final String email;

    public User(UUID id, String username, String email) {
        this.id = id;
        this.username = username;
        this.email = email;
    }
    public UUID getId() { return id; }
    public String getUsername() { return username; }
    public String getEmail() { return email; }
}CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY,
    username VARCHAR(100) NOT NULL UNIQUE,
    email VARCHAR(150) NOT NULL UNIQUE
);spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/userdb
    username: user
    password: pass
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
  flyway:
    enabled: true
  cache:
    type: redis
  redis:
    host: localhost
    port: 6379

logging:
  level:
    org.springframework: INFO

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  metrics:
    export:
      prometheus:
        enabled: true

server:
  port: 8080
}FROM eclipse-temurin:17-jre-alpine
VOLUME /tmp
COPY target/user-service-1.0.0.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java","-jar","/app.jar"]
package gov.example.user;

import gov.example.user.application.port.in.RegisterUserCommand;
import gov.example.user.application.service.UserService;
import gov.example.user.domain.User;
import gov.example.user.adapter.out.persistence.UserRepositoryPort;
import org.mockito.Mockito;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.util.Optional;
import java.util.UUID;

public class UserServiceTest {
    private UserService userService;
    private UserRepositoryPort repo;

    @BeforeMethod
    public void setup() {
        repo = Mockito.mock(UserRepositoryPort.class);
        userService = new UserService(repo);
    }

    @Test
    public void testRegisterUser() {
        RegisterUserCommand cmd = new RegisterUserCommand("alice", "alice@example.com");
        User mockUser = new User(UUID.randomUUID(), "alice", "alice@example.com");
        Mockito.when(repo.save(Mockito.any())).thenReturn(mockUser);
        User result = userService.register(cmd);
        Assert.assertEquals(result.getUsername(), "alice");
        Assert.assertEquals(result.getEmail(), "alice@example.com");
    }

    @Test
    public void testFindById() {
        UUID id = UUID.randomUUID();
        User mockUser = new User(id, "bob", "bob@example.com");
        Mockito.when(repo.findById(id)).thenReturn(Optional.of(mockUser));
        Optional<User> found = userService.findById(id);
        Assert.assertTrue(found.isPresent());
        Assert.assertEquals(found.get().getUsername(), "bob");
    }
}
package gov.example.user;

import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.springframework.web.client.RestTemplate;
import gov.example.user.adapter.in.web.RegisterUserRequest;
import gov.example.user.adapter.in.web.UserDto;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class UserControllerIT {

    @LocalServerPort
    private int port;

    private final RestTemplate rest = new RestTemplate();

    @Test
    public void testRegisterAndGetUser() {
        RegisterUserRequest req = new RegisterUserRequest();
        req.setUsername("charlie");
        req.setEmail("charlie@example.com");

        UserDto created = rest.postForObject("http://localhost:" + port + "/api/v1/users", req, UserDto.class);

        Assert.assertNotNull(created);
        Assert.assertEquals(created.username(), "charlie");

        UserDto got = rest.getForObject("http://localhost:" + port + "/api/v1/users/" + created.id(), UserDto.class);

        Assert.assertEquals(got.email(), "charlie@example.com");
