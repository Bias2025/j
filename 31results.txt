spring:
  cache:
    type: jcache
    jcache:
      config: classpath:ehcache.xml

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
        <config
    xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    xmlns='http://www.ehcache.org/v3'
    xsi:schemaLocation="http://www.ehcache.org/v3 http://www.ehcache.org/schema/ehcache-core-3.0.xsd">

  <service>
    <cache-manager>
      <default-serializer>org.ehcache.impl.serialization.KryoSerializer</default-serializer>
    </cache-manager>
    <!-- Terracotta cluster config if enabled -->
  </service>

  <cache alias="restResponses">
    <key-type>java.lang.String</key-type>
    <value-type>java.lang.Object</value-type>
    <expiry>
      <ttl unit="minutes">5</ttl>
    </expiry>
    <resources>
      <heap unit="entries">100000</heap>
      <offheap unit="MB">512</offheap>
      <disk persistent="true" unit="GB">5</disk>
    </resources>
  </cache>

  <!-- Add more cache regions as needed -->
</config>
@Service
public class CacheableService {

    @Cacheable(value = "restResponses", key = "#id", unless = "#result == null")
    public MyDto getExpensiveResult(String id) {
        // business logic
    }

    @CacheEvict(value = "restResponses", key = "#id")
    public void invalidateCache(String id) {
        // eviction logic (GDPR compliance, etc.)
    }
}
@Configuration
public class CacheMetricsConfig {

    @Bean
    public CacheMetricsRegistrar cacheMetricsRegistrar(MeterRegistry registry, CacheManager cacheManager) {
        return new CacheMetricsRegistrar(registry, cacheManager);
    }
}
